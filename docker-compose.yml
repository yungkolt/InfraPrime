# InfraPrime Local Development Environment
# Docker Compose configuration for running the entire three-tier application locally

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: infraprime-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: infraprime
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/database/init:/docker-entrypoint-initdb.d
    networks:
      - infraprime-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d infraprime"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache (for sessions and caching)
  redis:
    image: redis:7-alpine
    container_name: infraprime-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - infraprime-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API Service
  backend:
    build:
      context: ./application/backend
      dockerfile: Dockerfile
    container_name: infraprime-backend
    restart: unless-stopped
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://admin:dev_password_123@database:5432/infraprime
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
      - API_VERSION=1.0.0
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
      - LOG_LEVEL=DEBUG
    ports:
      - "5000:5000"
    volumes:
      - ./application/backend:/app
      - backend_logs:/app/logs
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - infraprime-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Development Server
  frontend:
    image: node:18-alpine
    container_name: infraprime-frontend
    restart: unless-stopped
    working_dir: /app
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./application/frontend:/app
      - frontend_node_modules:/app/node_modules
    command: >
      sh -c "
        npm install &&
        npm run start
      "
    depends_on:
      - backend
    networks:
      - infraprime-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: infraprime-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - infraprime-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Development Tools Container
  devtools:
    image: node:18-alpine
    container_name: infraprime-devtools
    working_dir: /workspace
    volumes:
      - .:/workspace
      - devtools_cache:/root/.npm
    command: tail -f /dev/null
    networks:
      - infraprime-network
    profiles:
      - tools

  # Database Administration (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: infraprime-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@infraprime.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - database
    networks:
      - infraprime-network
    profiles:
      - tools
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Trivy Security Scanner
  trivy:
    image: aquasec/trivy:latest
    container_name: infraprime-trivy
    restart: "no"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - trivy_cache:/root/.cache/trivy
    networks:
      - infraprime-network
    profiles:
      - security
    entrypoint: ["/bin/sh"]
    command: >
      -c "
        echo 'Trivy Security Scanner Ready' &&
        echo 'Available commands:' &&
        echo '  docker-compose exec trivy trivy image infraprime-backend:latest' &&
        echo '  docker-compose exec trivy trivy image --severity HIGH,CRITICAL infraprime-backend:latest' &&
        echo '  docker-compose exec trivy trivy image --format table infraprime-backend:latest' &&
        tail -f /dev/null
      "
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"


# Named Volumes for Persistent Data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  frontend_node_modules:
    driver: local
  nginx_logs:
    driver: local
  devtools_cache:
    driver: local
  pgadmin_data:
    driver: local
  trivy_cache:
    driver: local

# Custom Network
networks:
  infraprime-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
