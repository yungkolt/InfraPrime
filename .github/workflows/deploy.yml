name: Deploy Three-Tier Application

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: three-tier-backend
  PROJECT_NAME: three-tier-app

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          cd application/backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run Python linting
        run: |
          cd application/backend
          pip install flake8 black isort
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check src/
          isort --check-only src/
      
      - name: Run Python tests
        run: |
          cd application/backend
          python -m pytest tests/ -v --cov=src --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./application/backend/coverage.xml
          flags: backend
          name: backend-coverage
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install frontend dependencies
        run: |
          cd application/frontend
          npm install
      
      - name: Run frontend linting
        run: |
          cd application/frontend
          npm run lint
      
      - name: Run frontend tests
        run: |
          cd application/frontend
          npm test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Install tfsec
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
      
      - name: Run tfsec
        run: |
          tfsec terraform/ --format json --out tfsec-results.json
      
      - name: Upload tfsec results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: tfsec-results
          path: tfsec-results.json

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    outputs:
      image-tag: ${{ steps.build-image.outputs.image-tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-get-login@v2
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd application/backend
          
          # Build Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Push Docker image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Scan Docker image for vulnerabilities
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      
      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate
      
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan \
            -var="environment=${{ steps.env.outputs.environment }}" \
            -var="image_tag=${{ needs.build-and-push.outputs.image-tag }}" \
            -var="notification_email=${{ secrets.NOTIFICATION_EMAIL }}" \
            -out=tfplan
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
      
      - name: Get Terraform Outputs
        id: terraform-outputs
        run: |
          cd terraform
          echo "alb-url=$(terraform output -raw alb_url)" >> $GITHUB_OUTPUT
          echo "cloudfront-url=$(terraform output -raw cloudfront_url)" >> $GITHUB_OUTPUT
      
      - name: Deploy Frontend to S3
        run: |
          cd application/frontend
          
          # Update API endpoint in frontend
          sed -i "s|http://localhost:5000|${{ steps.terraform-outputs.outputs.alb-url }}|g" src/app.js
          
          # Upload to S3
          aws s3 sync src/ s3://$(cd ../../terraform && terraform output -raw s3_bucket_name)/ --delete
          
          # Invalidate CloudFront cache
          aws cloudfront create-invalidation \
            --distribution-id $(cd ../../terraform && terraform output -raw cloudfront_distribution_id) \
            --paths "/*"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false
      
      - name: Get deployment URLs
        id: urls
        run: |
          cd terraform
          terraform init
          echo "alb-url=$(terraform output -raw alb_url)" >> $GITHUB_OUTPUT
          echo "cloudfront-url=$(terraform output -raw cloudfront_url)" >> $GITHUB_OUTPUT
      
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 60
      
      - name: Health Check - Backend
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.urls.outputs.alb-url }}/health)
          if [ $response -eq 200 ]; then
            echo "✅ Backend health check passed"
          else
            echo "❌ Backend health check failed with status: $response"
            exit 1
          fi
      
      - name: Health Check - Frontend
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.urls.outputs.cloudfront-url }})
          if [ $response -eq 200 ]; then
            echo "✅ Frontend health check passed"
          else
            echo "❌ Frontend health check failed with status: $response"
            exit 1
          fi
      
      - name: API Integration Tests
        run: |
          # Test API endpoints
          echo "Testing API endpoints..."
          
          # Test data endpoint
          curl -f ${{ steps.urls.outputs.alb-url }}/api/data
          
          # Test stats endpoint
          curl -f ${{ steps.urls.outputs.alb-url }}/api/stats
          
          # Test database connectivity
          curl -f ${{ steps.urls.outputs.alb-url }}/api/test-db
          
          echo "✅ All API tests passed"

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false
      
      - name: Get ALB URL
        id: alb
        run: |
          cd terraform
          terraform init
          echo "url=$(terraform output -raw alb_url)" >> $GITHUB_OUTPUT
      
      - name: Install Apache Bench
        run: sudo apt-get update && sudo apt-get install -y apache2-utils
      
      - name: Run Load Test
        run: |
          echo "Running load test on ${{ steps.alb.outputs.url }}"
          ab -n 1000 -c 10 -l ${{ steps.alb.outputs.url }}/health
          
          echo "Running API load test"
          ab -n 500 -c 5 -l ${{ steps.alb.outputs.url }}/api/data

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always()
    
    steps:
      - name: Get deployment URLs
        id: urls
        if: needs.deploy-infrastructure.result == 'success'
        run: |
          echo "This step would get the URLs from Terraform outputs"
          echo "alb-url=http://example-alb.amazonaws.com" >> $GITHUB_OUTPUT
          echo "cloudfront-url=https://example.cloudfront.net" >> $GITHUB_OUTPUT
      
      - name: Notification - Success
        if: needs.integration-tests.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "Backend URL: ${{ steps.urls.outputs.alb-url }}"
          echo "Frontend URL: ${{ steps.urls.outputs.cloudfront-url }}"
          echo "Environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}"
      
      - name: Notification - Failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs for more information."
