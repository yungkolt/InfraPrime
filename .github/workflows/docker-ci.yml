name: Docker CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PROJECT_NAME: infraprime

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          cd application/backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run Python linting
        run: |
          cd application/backend
          pip install flake8 black isort
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check src/
          isort --check-only src/
      
      - name: Run Python tests
        run: |
          cd application/backend
          python -m pytest tests/ -v --tb=short --cov=src --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./application/backend/coverage.xml
          flags: backend
          name: backend-coverage
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install frontend dependencies
        run: |
          cd application/frontend
          npm install
      
      - name: Run frontend linting
        run: |
          cd application/frontend
          npm run lint
      
      - name: Run frontend tests
        run: |
          cd application/frontend
          npm test -- --watchAll=false

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend image
        run: |
          cd application/backend
          docker build -t infraprime-backend:latest .
          docker build -t infraprime-backend:${{ github.sha }} .
      
      - name: Build frontend image
        run: |
          cd application/frontend
          docker build -t infraprime-frontend:latest .
          docker build -t infraprime-frontend:${{ github.sha }} .
      
      - name: Test Docker Compose
        run: |
          docker-compose -f docker-compose.yml config
          docker-compose -f docker-compose.yml -f docker-compose.dev.yml config

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Start services
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
          sleep 30  # Wait for services to be ready
      
      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to start..."
          sleep 30
          timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 5; done'
      
      - name: Run integration tests
        run: |
          # Test backend health
          curl -f http://localhost:5000/health
          
          # Test API endpoints
          curl -f http://localhost:5000/api/data
          curl -f http://localhost:5000/api/stats
          curl -f http://localhost:5000/api/test-db
          
          # Test frontend
          curl -f http://localhost:8080
      
      - name: Check service logs
        if: failure()
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.dev.yml logs
      
      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
      
      - name: Scan Docker images
        run: |
          cd application/backend
          docker build -t infraprime-backend:security-scan .
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL \
            infraprime-backend:security-scan
